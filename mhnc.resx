<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>1. Thi công bể cá ngoài trời giúp tăng vẻ đẹp cho công trình
Rất nhiều gia chủ khi thiết kế nhà chỉ quan tâm đến phần thiết kế kiến trúc mà bỏ qua hoặc ít
chú trọng đến không gian sân vườn. Điều này là một sai lầm lớn. Một ngôi nhà đẹp phải là một
 ngôi nhà có sự kết hợp hài hòa giữa cả 2 yếu tố là kiến trúc công trình và không gian sân vườn
Có nhiều cách để người ta có thể bố trí thiết kế thi công cảnh quan sân vườn. Thay vì chỉ bố trí
 các loại cây xanh, hoa, thảm cỏ… cho sân vườn thì việc có thêm yếu tố nước từ bể cá ngoài trời
 sẽ làm cho không gian trở nên ấn tượng hơn. Đây có thể là điểm nhấn tượng giúp công trình 
hài hòa hơn với thiên nhiên và từ đó tăng thêm vẻ đẹp cho công trình.</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>2. Bể Thủy Sinh
Với nhiều năm kinh nghiệm trong lĩnh vực sản xuất bể cá cảnh nói chung bể cá thủy sinh nói riêng.
  Cá Cảnh Minh Long luôn trao dồi ki năng ,tìm hiểu về kiến thức để mang tới người chơi những mẫu
 bể đẹp . Tiếp kiệm chi phí và hài lòng nhất tới quý khách hàng .
Ưu Điểm Của Bể :
Bể Thủy Sinh khác với nhiều mẫu bể thông thường khác là mang tới không gian xanh , mát cho ngồi
 nhà của bạn như thiên nhiên .Dù diện tích hẹp . Mẫu bể thủy sinh mang thiên nhiên gần gũi hơn với 
gia chủ là một thu vui  . Giúp giúp tinh thần người chơi thư thái an yên hơn sau những ngày làm việc 
mệt mỏi .</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>3. Bể cá mini truyền thống
 Bể cá mini dạng tròn truyền thống đã xuất hiện từ lâu. Nó cũng được sử dụng rộng rãi ở nhiều nơi
 trên toàn thế giới. Hiện tại, nó được nhiều người lựa chọn nhờ phong cách cổ điển, đơn giản nhưng
 phù hợp với nhiều không gian khác nhau.
 Đặc biệt, mẫu bể truyền thống này rất dễ trang trí. Bạn có thể sử dụng những loại tiểu cảnh, cây thủy
 sinh nhỏ. Từ đó, tạo nên một bể cá tuyệt đẹp.</value>
  </data>
</root>